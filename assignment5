let creatures = [];
let clouds = [];
let flies = [];

function setup() {
  createCanvas(600, 400);
  
 class Creature {
  constructor(x, y, scale, speed) {
    this.x = x;
    this.y = y;
    this.size = scale;
    this.speed = speed;
  }

  draw() {
    push();
    strokeWeight(2);
    fill("darkolivegreen");
    ellipse(this.x - 30, this.y, 16.6, 45); // left back leg
    ellipse(this.x + 30, this.y, 16.6, 45); // right back leg
    ellipse(this.x, this.y - 5, 66.6, 50); // body
    ellipse(this.x, this.y - 33.3, 66.6, 33.3); // head
    ellipse(this.x - 13.3, this.y + 13.3, 16.6, 25); // left front leg
    ellipse(this.x + 13.3, this.y + 13.3, 16.6, 25); // right front leg
    fill("black");
    ellipse(this.x - 16.6, this.y - 46.6, 16.6, 16.6); // left eye
    ellipse(this.x + 16.6, this.y - 46.6, 16.6, 16.6); // right eye
    fill("white");
    ellipse(this.x, this.y - 25, 33.3, 8.3); // mouth
    pop();
  }

  update() {
    // Move horizontally
    this.x += this.speed;

    // Check if the creature has hit the left or right wall
    if (this.x < 0 || this.x > canvas.width) {
      // Reverse direction
      this.speed *= -1;
    }
  }
}

Creature.createCreatures = function(num) {
  let creatures = [];
  for (let i = 0; i < num; i++) {
    creatures.push(new Creature(random(canvas.width), random(canvas.height), random(10, 50), random(-5, 5)));
  }
  return creatures;
};


class Cloud {
  constructor(x, y, r, w, h) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.width = w;
    this.height = h;
  }

  move() {
    this.x += random(-5, 5);
    this.y += random(-5, 5);
  }

  update() {
    this.move();
    this.checkEdges();
  }

  show() {
    push();
    fill("white");
    noStroke();
    ellipse(this.x - 20, this.y, 40, 40);
    ellipse(this.x, this.y, 40, 40);
    ellipse(this.x + 20, this.y, 40, 40);
    ellipse(this.x - 10, this.y - 10, 40, 40);
    ellipse(this.x + 10, this.y - 10, 40, 40);
    ellipse(this.x, this.y - 15, 40, 40);
    pop();
  }

  checkEdges() {
    if (this.x < -this.r) {
      this.x = this.width + this.r * 2;
    } else if (this.x > this.width + this.r) {
      this.x = -this.r;
    }

    if (this.y < -this.r) {
      this.y = this.height + this.r;
    } else if (this.y > this.height + this.r) {
      this.y = -this.r;
    }
  }
}

class Fly {
  constructor(x, y, scale, speedX, speedY) {
    this.x = x;
    this.y = y;
    this.size = scale;
    this.speedX = speedX;
    this.speedY = speedY;
  }

  draw() {
    push();
    translate(this.x, this.y);
    ellipseMode(CENTER);
    fill("grey");
    ellipse(0, 0, 11.1, 11.1);
    fill("white");
    ellipse(-7.77, -4.44, 11.1, 5.4);
    ellipse(7.77, -4.44, 11.1, 5.4);
    strokeWeight(0);
    ellipse(2.78, 0, 3.86, 3.86);
    ellipse(-2.78, 0, 3.86, 3.86);
    fill("black");
    ellipse(2.78, 0, 2.76, 2.76);
    ellipse(-2.78, 0, 2.76, 2.76);
    strokeWeight(2);
    line(-5.56, 0, -11.1, 2.22);
    line(-5.56, 2.22, -11.1, 5.56);
    line(5.56, 0, 11.1, 2.22);
    line(5.56, 2.22, 11.1, 5.56);
    pop();
  }

  checkCollisions(creatures) {
    for (let i = 0; i < creatures.length; i++) {
      let d = dist(this.x, this.y, creatures[i].x, creatures[i].y);
      let combinedR = this.size / 2 + creatures[i].size / 2;
      if (d < combinedR) {
        creatures.splice(i, 1);
        return true;
      }
    }
    return false;
  }

  update(flies, creatures) {
    this.x += this.speedX;
    this.y += this.speedY;

    if (this.checkCollisions(creatures)) {
      flies.splice(flies.indexOf(this), 1);
      return;
    }

    for (let j = 0; j < flies.length; j++) {
      // Don't check for collision with self
      if (flies[j] === this) continue;

      let d = dist(this.x, this.y, flies[j].x, flies[j].y);
      let combinedR = this.size / 2 + flies[j].size / 2;

      if (d < combinedR) {
        // Create a new fly at the same location
        let newFly = new Fly(this.x, this.y, random(5, 10), random(-2, 2), random(-2, 2));
        flies.push(newFly);
      }
    }

    // Check if the fly has hit the left or right wall
    if (this.x < 0 || this.x > width) {
      // Reverse direction
      this.speedX *= -1;
    }

    // Check if the fly has hit the top or bottom wall
    if (this.y < 0 || this.y > height) {
      // Reverse direction
      this.speedY *= -1;
    }
  }
}


function setup()  {
  createCanvas(400, 400);
  
  // Create 5 creatures
  creatures = Creature.createCreatures(5);
  
  // Create a new cloud with a random position and size
  clouds.push(new Cloud(random(width), random(height), 50));
  
  // Create 10 flies with random positions, speeds, and directions
  flies = [];
  for (let i = 0; i < 10; i++) {
    let fly = new Fly(random(width), random(height), random(5, 10), random(-2, 2), random(-2, 2));
    flies.push(fly);
  }
}

function draw() {
  background("skyblue");

  // Draw creatures
  for (let i = 0; i < creatures.length; i++) {
    creatures[i].update();
    creatures[i].draw();
  }

  // Draw clouds
  for (let i = 0; i < clouds.length; i++) {
    clouds[i].update();
    clouds[i].show();
  }

  // Draw flies
    for (let i = 0; i < flies.length; i++) {
    // Move the fly
    flies[i].move();
  }
}
}
